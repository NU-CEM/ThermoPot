{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! More coming soon...ish \ud83d\udc22","title":"Welcome"},{"location":"api/","text":"API documentation Bases: object Parent class for parsing and storing data from electronic structure calculations. Source code in thermopot/calculations.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Calculation ( object ): \"\"\" Parent class for parsing and storing data from electronic structure calculations.\"\"\" def __init__ ( self ): \"\"\"All attributes are None until set by derived classes. Attributes: volume (float): volume of the periodic unit cell filepath (str): path to the calculation output files energy (float): DFT total energy in eV xc (str): XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms (int): number of atoms in the periodice unit cell Returns: None. \"\"\" self . volume = None self . filepath = None self . energy = None self . xc = None self . NAtoms = None def check_attributes ( self ): \"\"\"Check that the Calculation class attributes make basic sense.\"\"\" assert ( type ( self . filepath ) == str ), \"filepath must be a string\" assert ( type ( self . energy ) == float ), \"energy must be a float\" assert ( type ( self . xc ) == str ), \"xc must be a string\" assert (( type ( self . NAtoms ) == int ) and self . NAtoms >= 1 ), \"NAtoms must be an integer >= 1\" assert (( type ( self . volume ) == float ) and self . volume > 0 ), \"volume must be a float > 0\" __init__ () All attributes are None until set by derived classes. Attributes: Name Type Description volume float volume of the periodic unit cell filepath str path to the calculation output files energy float DFT total energy in eV xc str XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms int number of atoms in the periodice unit cell Returns: Type Description None. Source code in thermopot/calculations.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self ): \"\"\"All attributes are None until set by derived classes. Attributes: volume (float): volume of the periodic unit cell filepath (str): path to the calculation output files energy (float): DFT total energy in eV xc (str): XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms (int): number of atoms in the periodice unit cell Returns: None. \"\"\" self . volume = None self . filepath = None self . energy = None self . xc = None self . NAtoms = None check_attributes () Check that the Calculation class attributes make basic sense. Source code in thermopot/calculations.py 27 28 29 30 31 32 33 34 35 36 def check_attributes ( self ): \"\"\"Check that the Calculation class attributes make basic sense.\"\"\" assert ( type ( self . filepath ) == str ), \"filepath must be a string\" assert ( type ( self . energy ) == float ), \"energy must be a float\" assert ( type ( self . xc ) == str ), \"xc must be a string\" assert (( type ( self . NAtoms ) == int ) and self . NAtoms >= 1 ), \"NAtoms must be an integer >= 1\" assert (( type ( self . volume ) == float ) and self . volume > 0 ), \"volume must be a float > 0\"","title":"API"},{"location":"api/#api-documentation","text":"Bases: object Parent class for parsing and storing data from electronic structure calculations. Source code in thermopot/calculations.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Calculation ( object ): \"\"\" Parent class for parsing and storing data from electronic structure calculations.\"\"\" def __init__ ( self ): \"\"\"All attributes are None until set by derived classes. Attributes: volume (float): volume of the periodic unit cell filepath (str): path to the calculation output files energy (float): DFT total energy in eV xc (str): XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms (int): number of atoms in the periodice unit cell Returns: None. \"\"\" self . volume = None self . filepath = None self . energy = None self . xc = None self . NAtoms = None def check_attributes ( self ): \"\"\"Check that the Calculation class attributes make basic sense.\"\"\" assert ( type ( self . filepath ) == str ), \"filepath must be a string\" assert ( type ( self . energy ) == float ), \"energy must be a float\" assert ( type ( self . xc ) == str ), \"xc must be a string\" assert (( type ( self . NAtoms ) == int ) and self . NAtoms >= 1 ), \"NAtoms must be an integer >= 1\" assert (( type ( self . volume ) == float ) and self . volume > 0 ), \"volume must be a float > 0\"","title":"API documentation"},{"location":"api/#thermopot.calculations.Calculation.__init__","text":"All attributes are None until set by derived classes. Attributes: Name Type Description volume float volume of the periodic unit cell filepath str path to the calculation output files energy float DFT total energy in eV xc str XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms int number of atoms in the periodice unit cell Returns: Type Description None. Source code in thermopot/calculations.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self ): \"\"\"All attributes are None until set by derived classes. Attributes: volume (float): volume of the periodic unit cell filepath (str): path to the calculation output files energy (float): DFT total energy in eV xc (str): XC functional used to calculate the total energy. Options are \"hse06\" or \"pbesol\". NAtoms (int): number of atoms in the periodice unit cell Returns: None. \"\"\" self . volume = None self . filepath = None self . energy = None self . xc = None self . NAtoms = None","title":"__init__()"},{"location":"api/#thermopot.calculations.Calculation.check_attributes","text":"Check that the Calculation class attributes make basic sense. Source code in thermopot/calculations.py 27 28 29 30 31 32 33 34 35 36 def check_attributes ( self ): \"\"\"Check that the Calculation class attributes make basic sense.\"\"\" assert ( type ( self . filepath ) == str ), \"filepath must be a string\" assert ( type ( self . energy ) == float ), \"energy must be a float\" assert ( type ( self . xc ) == str ), \"xc must be a string\" assert (( type ( self . NAtoms ) == int ) and self . NAtoms >= 1 ), \"NAtoms must be an integer >= 1\" assert (( type ( self . volume ) == float ) and self . volume > 0 ), \"volume must be a float > 0\"","title":"check_attributes()"},{"location":"background/","text":"Coming soon...ish \ud83d\udc22","title":"Background"},{"location":"contributing/","text":"Coming soon...ish \ud83d\udc22","title":"Contributing"},{"location":"installation/","text":"Coming soon...ish \ud83d\udc22","title":"Installation"},{"location":"tutorial/","text":"","title":"Tutorial"}]}